{"FileModelVersion":{"Major":1,"Minor":0},"Name":"spot-BD","Version":10,"SavedTotalBlockCount":1036,"SavedMaterialCost":22399.0,"ContainedMaterialCost":0.0,"ItemDictionary":{"1106":"867cea4e-6ea4-4fe2-a4a1-b6230308f8f1","943":"c6176cb5-0a32-4d68-a749-8ee33b2230c1","939":"9411e401-27da-4546-b805-3334f200f055","937":"8f9dbf41-6c2d-4e7b-855d-b2432c6942a2","390":"3cc75979-18ac-46c4-9a5b-25b327d99410","944":"a3ea61a8-018c-4277-afd9-ac0a34faa759","945":"2a3905ff-2030-421d-a2bf-90fba71c1c5e","938":"649f2aec-6f59-4157-ac01-0122ce2e6dad","412":"5b609887-c1dd-407b-b3b6-b1eb35d1e818","1023":"b148f5b4-e237-41a0-a1a3-30c455321149","419":"ceed114a-ddb5-47d4-9b7a-ef1ce9398e09","463":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","641":"8746f5b3-e2a6-4067-95bc-9da3900690f8","403":"0706d2b0-c244-4e0f-8577-79338cb073cf","445":"c6b9d38c-01e5-4a37-8493-2b7f7f1d74fb","417":"d3924bae-be5a-43a0-be19-64fc7c8d6059","7":"d93e3937-d015-44bc-95d4-84a4d264de32","341":"3af2aa7c-86c8-47f5-896d-26d9622cdea8","295":"267adeca-82e1-4578-8d3f-85608cd0aa87","276":"811379b2-2e27-4268-b821-940766960802","340":"0639fbba-70be-4398-857c-6786dab39bea","942":"911fe222-f9b2-4892-9cd6-8b154d55b2aa","711":"e63040c9-0027-4fd3-be30-67fe3e950140","699":"cdca5dec-eeee-4849-9b2e-73b23e216465","698":"788700be-1e74-46d7-9e34-1a5ec2747548","1104":"242e07fa-399f-4caa-bfc2-1b77bd2bd538","854":"2eca89e0-5c2f-4b1c-a5bf-df5190e13ef4","353":"51f8afc5-b071-4639-9f96-693b952fdf80","860":"60bc1939-6207-4b3e-9f31-444ed626c775","851":"1fa6e1a9-83fb-4efc-b9bc-19ea0d1005cb","856":"85ea264e-6ef0-48df-9adc-9b1a8fe15247","853":"9083c801-30fd-4c67-b571-b67aeb48ec88","833":"d7a76933-2332-47f6-814e-69b882e5038f","852":"ec641c5f-d6fa-4e58-8158-142f44c2516a","831":"2fb6755f-46ba-4030-b993-3377070e9e14","834":"b2e97525-af75-4731-b7c7-505fb5e727a7","832":"700c8381-fcd6-4f4a-b85c-c1e2de2813d0","384":"b6904047-0232-442f-b444-d99a440edf2f","1112":"983ebe9d-535e-4bdb-a37f-6b681a96f5a3","1363":"d204f301-7ea9-4bcf-b9e8-34ed899de190","393":"6c0bab88-aa88-4825-9cf5-55df36aa12b8","1362":"552d8144-11c0-46e6-8607-927f825b18be","668":"88c3c6c4-c831-40ee-a8a4-ad3574556874","387":"0c03433e-8947-4e7d-9dec-793526fe06d1"},"Blueprint":{"ContainedMaterialCost":0.0,"CSI":[0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,499.99998010978743,0.0,1.0,1.0,0.0,1.0,18.532371520996094,41.336235046386719,-1.0,0.0,500.0,1.0,1.0,0.0,0.0,0.0,0.0,431.47500610351563,0.0,0.10000000149011612,0.10000000149011612,1.0,1.0,3.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,0.0,0.0,-1.0,1790.799560546875,0.0,-1.0,0.0,0.0,500.0,-1.0,12.0,0.0,0.0,0.0,26.596477508544922,0.0,0.0,0.0,0.0,0.54058218002319336,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.14033,0.61925,0.418736,0.426132","0.94927,0.275493,0.615298,0.879853","0.593869,0.854022,0.12954,0.786707","0.887228,0.627636,0.49379,0.275524","0.169496,0.600657,0.701546,0.39898","0.422402,0.053735,0.791902,0.217455","0.996928,0.806339,0.115558,0.891952","0.902911,0.950594,0.620302,0.395776","0.538445,0.718802,0.179233,0.848204","0.947664,0.822671,0.257835,0.38832","0.860701,0.589326,0.867138,0.171274","0.497501,0.912629,0.830456,0.17406","0.798787,0.290172,0.709183,0.322122","0.177371,0.123551,0.929103,0.085642","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0.282353,0.33,0.13,1"],"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAACoAAQAAAAAAAAIAAAAABAADAAAAABIAJIgAAAAZAF0AAAAAGQBdGwEAABkACQABAQAABAAAAD8FAAQAAIA/ZAAEAADwQQAABBAAAAABAAdzdHJhZmVy","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,-2,-1","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":1,"MaxCords":"0,0,0","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":1,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,2","0,0,1"],"BLR":[0,22,0],"BP1":null,"BP2":null,"BCI":[0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABHH3N8JkAAQAAPBBAAAEFwAAAAEAAD8AAABKAAAAAAAAAAABAAAAAAsAAgAAAAAgAAMAAAAANQAEAAAAADUABQAAAAA1AAYAAAAAPAAHAAAAAEMAXRsBAABKAAEACAAAgD8AAABAZAAEAAAAAAQABAAAgD8HAAQAAIA/ZAAEAAAAAAQABAAAgL8HAAQAAIC/AQAEAACAPwMABAAAgD8CAAQAAIA/","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,17","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":3,"MaxCords":"0,0,2","MinCords":"0,0,0","BlockIds":[699,668,387],"BlockState":"000","AliveCount":3,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":38,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":3}],"BLP":["0,0,0","1,0,4","2,0,8","2,0,9","2,0,13","2,0,17","0,0,19","-2,0,17","-1,0,18","-2,0,16","-1,0,16","-1,0,15","0,0,15","0,0,14","1,0,14","1,0,13","0,0,1","1,0,5","-1,0,17","0,0,18","1,0,19","2,0,19"],"BLR":[0,17,17,18,18,18,21,18,18,19,16,23,20,23,20,23,18,18,17,22,1,20],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABGIvyUJkAAQAAPBBAAAEFgAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,15","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":25,"MaxCords":"2,0,19","MinCords":"-2,0,0","BlockIds":[699,1112,1112,1106,1106,1104,1363,1363,393,942,942,942,942,942,942,942,1112,1112,1362,1363,393,1362],"BlockState":"=0,22","AliveCount":22,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":37,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":22}],"BLP":["0,0,0","0,0,1","0,0,5","0,0,9","0,0,13","-1,0,-1","1,0,3","1,0,7","-1,0,3","-1,0,7","0,0,-1","-1,0,11","-1,0,13","1,0,11","1,0,15","0,0,16","1,0,16","2,0,15","1,0,-1","1,0,-2","-1,0,-2","0,0,-2","-2,0,2","-2,0,6","-2,0,10","-2,0,11","0,1,-1","1,1,-1","-1,1,-1","-1,1,0","-1,1,1","-1,1,2","-1,1,3","-1,1,4","-1,1,5","-1,1,6","-1,1,7","-1,1,8","-1,1,9","-1,1,10","-1,1,11","-1,1,12","1,1,12","1,1,11","1,1,10","1,1,9","1,1,8","1,1,7","1,1,6","1,1,5","1,1,4","1,1,3","1,1,2","1,1,1","1,1,0","1,1,15","1,1,14","1,1,13","-1,1,13","-1,1,14","1,1,16","-1,1,15","0,1,16","-1,-1,-1","-1,-1,0","-1,-1,1","-1,-1,2","-1,-1,3","-1,-1,4","-1,-1,5","-1,-1,6","-1,-1,7","-1,-1,8","-1,-1,9","-1,-1,10","-1,-1,11","-1,-1,12","-1,-1,13","-1,-1,14","-1,-1,15","0,-1,-1","0,-1,16","1,-1,-1","1,-1,0","1,-1,1","1,-1,2","1,-1,3","1,-1,4","1,-1,5","1,-1,6","1,-1,7","1,-1,8","1,-1,9","1,-1,10","1,-1,11","1,-1,12","1,-1,13","1,-1,14","1,-1,15","1,-1,16","0,1,15","0,1,14","0,1,13","0,1,12","0,1,11","0,1,10","0,1,9","0,1,8","0,1,7","0,1,6","0,1,5","0,1,4","0,1,3","0,1,2","0,1,1","0,1,0","0,-1,3","0,-1,7","0,-1,11","0,-1,15"],"BLR":[0,18,18,18,18,16,16,16,16,16,0,12,18,18,0,0,20,17,16,22,23,23,19,19,19,18,2,2,19,11,11,11,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,3,16,0,0,19,7,7,7,7,7,7,7,7,7,7,7,7,7,15,15,12,14,12,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,16,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14,14,14,14],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,10,4,4,10,10,10,10,10,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABFNnWsJkAAQAAPBBAAAEFQAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,1","LocalRotation":"0,0,0.707106,0.707106","ForceId":0,"TotalBlockCount":145,"MaxCords":"2,1,16","MinCords":"-2,-1,-2","BlockIds":[699,1106,1106,1106,1104,939,939,939,939,939,390,937,945,939,390,390,943,945,939,854,854,353,860,851,851,856,853,833,833,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,831,833,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,834,853,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,832,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,851,851,851,851],"BlockState":"=0,120","AliveCount":120,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":36,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":120}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAA8EEAAAQUAAAA","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"spot-leg_left","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"-7,1,14","LocalRotation":"0.707106,0,0,0.707106","ForceId":0,"TotalBlockCount":146,"MaxCords":"0,0,1","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":35,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,2","0,0,1"],"BLR":[0,22,0],"BP1":null,"BP2":null,"BCI":[0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABHH3N8JkAAQAAPBBAAAEFwAAAAEAAD8AAABKAAAAAAAAAAABAAAAAAsAAgAAAAAgAAMAAAAANQAEAAAAADUABQAAAAA1AAYAAAAAPAAHAAAAAEMAXRsBAABKAAEACAAAgD8AAABAZAAEAAAAAAQABAAAgD8HAAQAAIA/ZAAEAAAAAAQABAAAgL8HAAQAAIC/AQAEAACAPwMABAAAgD8CAAQAAIA/","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,17","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":3,"MaxCords":"0,0,2","MinCords":"0,0,0","BlockIds":[699,668,387],"BlockState":"000","AliveCount":3,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":42,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":3}],"BLP":["0,0,0","1,0,4","2,0,8","2,0,9","2,0,13","2,0,17","0,0,19","-2,0,17","-1,0,18","-2,0,16","-1,0,16","-1,0,15","0,0,15","0,0,14","1,0,14","1,0,13","0,0,1","1,0,5","-1,0,17","0,0,18","1,0,19","2,0,19"],"BLR":[0,17,17,18,18,18,21,18,18,19,16,23,20,23,20,23,18,18,17,22,1,20],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABGIvyUJkAAQAAPBBAAAEFgAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,15","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":25,"MaxCords":"2,0,19","MinCords":"-2,0,0","BlockIds":[699,1112,1112,1106,1106,1104,1363,1363,393,942,942,942,942,942,942,942,1112,1112,1362,1363,393,1362],"BlockState":"=0,22","AliveCount":22,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":41,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":22}],"BLP":["0,0,0","0,0,1","0,0,5","0,0,9","0,0,13","-1,0,-1","1,0,3","1,0,7","-1,0,3","-1,0,7","0,0,-1","-1,0,11","-1,0,13","1,0,11","1,0,15","0,0,16","1,0,16","2,0,15","1,0,-1","1,0,-2","-1,0,-2","0,0,-2","-2,0,2","-2,0,6","-2,0,10","-2,0,11","0,1,-1","1,1,-1","-1,1,-1","-1,1,0","-1,1,1","-1,1,2","-1,1,3","-1,1,4","-1,1,5","-1,1,6","-1,1,7","-1,1,8","-1,1,9","-1,1,10","-1,1,11","-1,1,12","1,1,12","1,1,11","1,1,10","1,1,9","1,1,8","1,1,7","1,1,6","1,1,5","1,1,4","1,1,3","1,1,2","1,1,1","1,1,0","1,1,15","1,1,14","1,1,13","-1,1,13","-1,1,14","1,1,16","-1,1,15","0,1,16","-1,-1,-1","-1,-1,0","-1,-1,1","-1,-1,2","-1,-1,3","-1,-1,4","-1,-1,5","-1,-1,6","-1,-1,7","-1,-1,8","-1,-1,9","-1,-1,10","-1,-1,11","-1,-1,12","-1,-1,13","-1,-1,14","-1,-1,15","0,-1,-1","0,-1,16","1,-1,-1","1,-1,0","1,-1,1","1,-1,2","1,-1,3","1,-1,4","1,-1,5","1,-1,6","1,-1,7","1,-1,8","1,-1,9","1,-1,10","1,-1,11","1,-1,12","1,-1,13","1,-1,14","1,-1,15","1,-1,16","0,1,15","0,1,14","0,1,13","0,1,12","0,1,11","0,1,10","0,1,9","0,1,8","0,1,7","0,1,6","0,1,5","0,1,4","0,1,3","0,1,2","0,1,1","0,1,0","0,-1,3","0,-1,7","0,-1,11","0,-1,15"],"BLR":[0,18,18,18,18,16,16,16,16,16,0,12,18,18,0,0,20,17,16,22,23,23,19,19,19,18,2,2,19,11,11,11,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,3,16,0,0,19,7,7,7,7,7,7,7,7,7,7,7,7,7,15,15,12,14,12,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,16,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14,14,14,14],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,10,4,4,10,10,10,10,10,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABFNnWsJkAAQAAPBBAAAEFQAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,1","LocalRotation":"0,0,0.707106,0.707106","ForceId":0,"TotalBlockCount":145,"MaxCords":"2,1,16","MinCords":"-2,-1,-2","BlockIds":[699,1106,1106,1106,1104,939,939,939,939,939,390,937,945,939,390,390,943,945,939,854,854,353,860,851,851,856,853,833,833,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,831,833,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,834,853,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,832,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,851,851,851,851],"BlockState":"=0,120","AliveCount":120,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":40,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":120}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAA8EEAAAQUAAAA","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"spot-leg_left","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"-7,1,-16","LocalRotation":"0.707106,0,0,0.707106","ForceId":0,"TotalBlockCount":146,"MaxCords":"0,0,1","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":39,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,2","0,0,1"],"BLR":[0,22,0],"BP1":null,"BP2":null,"BCI":[0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABHH3N8JkAAQAAPBBAAAEFwAAAAEAAD8AAABKAAAAAAAAAAABAAAAAAsAAgAAAAAgAAMAAAAANQAEAAAAADUABQAAAAA1AAYAAAAAPAAHAAAAAEMAXRsBAABKAAEACAAAgD8AAABAZAAEAAAAAAQABAAAgD8HAAQAAIA/ZAAEAAAAAAQABAAAgL8HAAQAAIC/AQAEAACAPwMABAAAgD8CAAQAAIA/","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,17","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":3,"MaxCords":"0,0,2","MinCords":"0,0,0","BlockIds":[699,668,387],"BlockState":"000","AliveCount":3,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":46,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":3}],"BLP":["0,0,0","1,0,4","2,0,8","2,0,9","2,0,13","2,0,17","0,0,19","-2,0,17","-1,0,18","-2,0,16","-1,0,16","-1,0,15","0,0,15","0,0,14","1,0,14","1,0,13","0,0,1","1,0,5","-1,0,17","0,0,18","1,0,19","2,0,19"],"BLR":[0,17,17,18,18,18,21,18,18,19,16,23,20,23,20,23,18,18,17,22,1,20],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABGIvyUJkAAQAAPBBAAAEFgAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,15","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":25,"MaxCords":"2,0,19","MinCords":"-2,0,0","BlockIds":[699,1112,1112,1106,1106,1104,1363,1363,393,942,942,942,942,942,942,942,1112,1112,1362,1363,393,1362],"BlockState":"=0,22","AliveCount":22,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":45,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":22}],"BLP":["0,0,0","0,0,1","0,0,5","0,0,9","0,0,13","-1,0,-1","1,0,3","1,0,7","-1,0,3","-1,0,7","0,0,-1","-1,0,11","-1,0,13","1,0,11","1,0,15","0,0,16","1,0,16","2,0,15","1,0,-1","1,0,-2","-1,0,-2","0,0,-2","-2,0,2","-2,0,6","-2,0,10","-2,0,11","0,1,-1","1,1,-1","-1,1,-1","-1,1,0","-1,1,1","-1,1,2","-1,1,3","-1,1,4","-1,1,5","-1,1,6","-1,1,7","-1,1,8","-1,1,9","-1,1,10","-1,1,11","-1,1,12","1,1,12","1,1,11","1,1,10","1,1,9","1,1,8","1,1,7","1,1,6","1,1,5","1,1,4","1,1,3","1,1,2","1,1,1","1,1,0","1,1,15","1,1,14","1,1,13","-1,1,13","-1,1,14","1,1,16","-1,1,15","0,1,16","-1,-1,-1","-1,-1,0","-1,-1,1","-1,-1,2","-1,-1,3","-1,-1,5","-1,-1,6","-1,-1,7","-1,-1,8","-1,-1,9","-1,-1,10","-1,-1,11","-1,-1,12","-1,-1,13","-1,-1,14","-1,-1,15","0,-1,-1","0,-1,16","1,-1,-1","1,-1,0","1,-1,1","1,-1,2","1,-1,3","1,-1,4","1,-1,5","1,-1,6","1,-1,7","1,-1,8","1,-1,9","1,-1,10","1,-1,11","1,-1,12","1,-1,13","1,-1,14","1,-1,15","1,-1,16","-1,-1,4","0,-1,15","0,-1,14","0,-1,13","0,-1,12","0,-1,11","0,-1,10","0,-1,9","0,-1,8","0,-1,7","0,-1,6","0,-1,5","0,-1,4","0,-1,3","0,-1,2","0,-1,1","0,-1,0","0,1,15","0,1,11","0,1,7","0,1,3"],"BLR":[0,18,18,18,18,16,16,16,16,16,0,12,18,18,0,0,20,17,16,22,23,23,19,19,19,18,2,2,19,11,11,11,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,3,16,0,0,19,7,7,7,7,7,7,7,7,7,7,7,7,15,15,12,14,12,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,16,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,10,4,4,10,10,10,10,10,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABFNnWsJkAAQAAPBBAAAEFQAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,1","LocalRotation":"0,0,0.707106,0.707106","ForceId":0,"TotalBlockCount":145,"MaxCords":"2,1,16","MinCords":"-2,-1,-2","BlockIds":[699,1106,1106,1106,1104,939,939,939,939,939,390,937,945,939,390,390,943,945,939,854,854,353,860,851,851,856,853,833,833,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,831,833,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,834,853,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,832,852,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,851,851,851,851],"BlockState":"=0,120","AliveCount":120,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":44,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":120}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAA8EEAAAQUAAAA","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"spot-leg_right","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"7,1,14","LocalRotation":"0.707106,0,0,0.707106","ForceId":0,"TotalBlockCount":146,"MaxCords":"0,0,1","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":43,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,2","0,0,1"],"BLR":[0,22,0],"BP1":null,"BP2":null,"BCI":[0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABHH3N8JkAAQAAPBBAAAEFwAAAAEAAD8AAABKAAAAAAAAAAABAAAAAAsAAgAAAAAgAAMAAAAANQAEAAAAADUABQAAAAA1AAYAAAAAPAAHAAAAAEMAXRsBAABKAAEACAAAgD8AAABAZAAEAAAAAAQABAAAgD8HAAQAAIA/ZAAEAAAAAAQABAAAgL8HAAQAAIC/AQAEAACAPwMABAAAgD8CAAQAAIA/","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,17","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":3,"MaxCords":"0,0,2","MinCords":"0,0,0","BlockIds":[699,668,387],"BlockState":"000","AliveCount":3,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":54,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":3}],"BLP":["0,0,0","1,0,4","2,0,8","2,0,9","2,0,13","2,0,17","0,0,19","-2,0,17","-1,0,18","-2,0,16","-1,0,16","-1,0,15","0,0,15","0,0,14","1,0,14","1,0,13","0,0,1","1,0,5","-1,0,17","0,0,18","1,0,19","2,0,19"],"BLR":[0,17,17,18,18,18,21,18,18,19,16,23,20,23,20,23,18,18,17,22,1,20],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABGIvyUJkAAQAAPBBAAAEFgAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,15","LocalRotation":"0,0,0,0.999999","ForceId":0,"TotalBlockCount":25,"MaxCords":"2,0,19","MinCords":"-2,0,0","BlockIds":[699,1112,1112,1106,1106,1104,1363,1363,393,942,942,942,942,942,942,942,1112,1112,1362,1363,393,1362],"BlockState":"=0,22","AliveCount":22,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":53,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":22}],"BLP":["0,0,0","0,0,1","0,0,5","0,0,9","0,0,13","-1,0,-1","1,0,3","1,0,7","-1,0,3","-1,0,7","0,0,-1","-1,0,11","-1,0,13","1,0,11","1,0,15","0,0,16","1,0,16","2,0,15","1,0,-1","1,0,-2","-1,0,-2","0,0,-2","-2,0,2","-2,0,6","-2,0,10","-2,0,11","0,1,-1","1,1,-1","-1,1,-1","-1,1,0","-1,1,1","-1,1,2","-1,1,3","-1,1,4","-1,1,5","-1,1,6","-1,1,7","-1,1,8","-1,1,9","-1,1,10","-1,1,11","-1,1,12","1,1,12","1,1,11","1,1,10","1,1,9","1,1,8","1,1,7","1,1,6","1,1,5","1,1,4","1,1,3","1,1,2","1,1,1","1,1,0","1,1,15","1,1,14","1,1,13","-1,1,13","-1,1,14","1,1,16","-1,1,15","0,1,16","-1,-1,-1","-1,-1,0","-1,-1,1","-1,-1,2","-1,-1,3","-1,-1,5","-1,-1,6","-1,-1,7","-1,-1,8","-1,-1,9","-1,-1,10","-1,-1,11","-1,-1,12","-1,-1,13","-1,-1,14","-1,-1,15","0,-1,-1","0,-1,16","1,-1,-1","1,-1,0","1,-1,1","1,-1,2","1,-1,3","1,-1,4","1,-1,5","1,-1,6","1,-1,7","1,-1,8","1,-1,9","1,-1,10","1,-1,11","1,-1,12","1,-1,13","1,-1,14","1,-1,15","1,-1,16","-1,-1,4","0,-1,15","0,-1,14","0,-1,13","0,-1,12","0,-1,11","0,-1,10","0,-1,9","0,-1,8","0,-1,7","0,-1,6","0,-1,5","0,-1,4","0,-1,3","0,-1,2","0,-1,1","0,-1,0","0,1,15","0,1,11","0,1,7","0,1,3"],"BLR":[0,18,18,18,18,16,16,16,16,16,0,12,18,18,0,0,20,17,16,22,23,23,19,19,19,18,2,2,19,11,11,11,11,11,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,3,3,16,0,0,19,7,7,7,7,7,7,7,7,7,7,7,7,15,15,12,14,12,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,16,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,10,4,4,10,10,10,10,10,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"BEI":null,"BlockData":"AAAAKgAAABkAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABFNnWsJkAAQAAPBBAAAEFQAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,0,1","LocalRotation":"0,0,0.707106,0.707106","ForceId":0,"TotalBlockCount":145,"MaxCords":"2,1,16","MinCords":"-2,-1,-2","BlockIds":[699,1106,1106,1106,1104,939,939,939,939,939,390,937,945,939,390,390,943,945,939,854,854,353,860,851,851,856,853,833,833,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,831,833,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,834,853,852,834,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,832,852,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,851,851,851,851],"BlockState":"=0,120","AliveCount":120,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":52,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":120}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAA8EEAAAQUAAAA","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"spot-leg_right","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"7,1,-16","LocalRotation":"-0.707106,0,0,-0.707106","ForceId":0,"TotalBlockCount":146,"MaxCords":"0,0,1","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":51,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAACwAAQAAAAAAAAIAAAAABAADAAAAABIAJIgAAAAZAF0AAAAAGQBdGwEAABkACQABAQAABAAAAD8EAAQAAIA/ZAAEAADwQQAABBEAAAABAAlmb3J3YXJkZXI=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":698,"LocalPosition":"0,-2,-4","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":1,"MaxCords":"0,0,0","MinCords":"0,0,0","BlockIds":[699],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":71,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":1}],"BLP":["-6,1,-16","-6,1,14","-5,-3,-18","-5,-3,-17","-5,-3,-16","-5,-3,-15","-5,-3,-11","-5,-3,-7","-5,-3,-3","-5,-3,1","-5,-3,5","-5,-3,9","-5,-3,13","-5,-2,-18","-5,-2,-15","-5,-2,-11","-5,-2,-7","-5,-2,-3","-5,-2,1","-5,-2,5","-5,-2,9","-5,-2,10","-5,-2,15","-5,-1,-20","-5,-1,-17","-5,-1,-15","-5,-1,-14","-5,-1,-13","-5,-1,-12","-5,-1,-11","-5,-1,-10","-5,-1,-9","-5,-1,-8","-5,-1,-7","-5,-1,-6","-5,-1,-5","-5,-1,-4","-5,-1,-3","-5,-1,-2","-5,-1,-1","-5,-1,0","-5,-1,1","-5,-1,2","-5,-1,3","-5,-1,4","-5,-1,5","-5,-1,6","-5,-1,7","-5,-1,8","-5,-1,9","-5,-1,10","-5,-1,11","-5,-1,12","-5,-1,13","-5,-1,15","-5,-1,17","-5,0,-20","-5,1,-21","-5,1,-20","-5,2,-16","-5,2,14","-5,2,17","-5,2,18","-5,3,-18","-5,3,-17","-5,3,-13","-5,3,-9","-5,3,-5","-5,3,-1","-5,3,3","-5,3,7","-5,3,11","-4,-3,-18","-4,-3,-15","-4,-3,-11","-4,-3,-7","-4,-3,-3","-4,-3,1","-4,-3,5","-4,-3,9","-4,-3,13","-4,-1,-20","-4,-1,17","-4,1,-21","-4,2,17","-4,2,18","-4,3,-17","-4,3,-13","-4,3,-6","-4,3,-5","-4,3,-1","-4,3,3","-4,3,7","-4,3,11","-3,-3,-18","-3,-3,-15","-3,-3,-11","-3,-3,-7","-3,-3,-3","-3,-3,1","-3,-3,5","-3,-3,9","-3,-3,13","-3,-1,-20","-3,-1,17","-3,1,-21","-3,2,18","-3,3,-17","-3,3,-13","-3,3,-9","-3,3,-5","-3,3,-1","-3,3,3","-3,3,7","-3,3,11","-2,-3,-18","-2,-3,-15","-2,-3,-11","-2,-3,-7","-2,-3,-3","-2,-3,1","-2,-3,5","-2,-3,9","-2,-3,13","-2,-2,-19","-2,-1,-20","-2,-1,15","-2,-1,16","-2,-1,17","-2,1,-21","-2,1,17","-2,2,-21","-2,2,18","-2,3,-18","-2,3,-17","-2,3,-13","-2,3,-9","-2,3,-5","-2,3,-1","-2,3,3","-2,3,7","-2,3,11","-1,-3,-18","-1,-3,-17","-1,-3,-16","-1,-3,-15","-1,-3,-11","-1,-3,-7","-1,-3,-3","-1,-3,1","-1,-3,5","-1,-3,9","-1,-3,13","-1,-1,-20","-1,-1,14","-1,-1,17","-1,0,-20","-1,0,16","-1,1,-21","-1,2,18","-1,3,-18","-1,3,-17","-1,3,-13","-1,3,-9","-1,3,-5","-1,3,-1","-1,3,3","-1,3,7","-1,3,11","0,-3,-18","0,-3,-15","0,-3,-11","0,-3,-7","0,-3,-3","0,-3,1","0,-3,5","0,-3,9","0,-3,13","0,-2,-3","0,-2,-2","0,-2,1","0,-2,2","0,-1,-20","0,-1,14","0,-1,17","0,0,16","0,0,17","0,1,-21","0,2,18","0,3,-18","0,3,-17","0,3,-13","0,3,-9","0,3,-5","0,3,-1","0,3,3","0,3,7","0,3,11","1,-3,-18","1,-3,-15","1,-3,-11","1,-3,-7","1,-3,-3","1,-3,1","1,-3,5","1,-3,9","1,-3,13","1,-2,-19","1,-1,-20","1,-1,14","1,-1,15","1,-1,16","1,-1,17","1,1,-21","1,2,-21","1,2,18","1,3,-18","1,3,-17","1,3,-13","1,3,-9","1,3,-5","1,3,-1","1,3,3","1,3,7","1,3,11","2,-3,-18","2,-3,-17","2,-3,-16","2,-3,-15","2,-3,-11","2,-3,-7","2,-3,-3","2,-3,1","2,-3,5","2,-3,9","2,-3,13","2,-1,-20","2,-1,15","2,-1,16","2,-1,17","2,0,-20","2,1,-21","2,1,17","2,2,18","2,3,-18","2,3,-17","2,3,-13","2,3,-9","2,3,-5","2,3,-1","2,3,3","2,3,7","2,3,11","3,-3,-18","3,-3,-15","3,-3,-11","3,-3,-7","3,-3,-3","3,-3,1","3,-3,5","3,-3,9","3,-3,13","3,-1,-20","3,-1,17","3,1,-21","3,1,14","3,2,18","3,3,-17","3,3,-13","3,3,-9","3,3,-5","3,3,-1","3,3,3","3,3,7","3,3,11","4,-3,-18","4,-3,-15","4,-3,-11","4,-3,-7","4,-3,-3","4,-3,1","4,-3,5","4,-3,9","4,-3,13","4,-1,-20","4,-1,17","4,1,-21","4,2,17","4,2,18","4,3,-17","4,3,-13","4,3,-9","4,3,-5","4,3,-1","4,3,3","4,3,7","4,3,11","5,-3,-18","5,-3,-12","5,-3,-8","5,-3,-4","5,-3,0","5,-3,4","5,-3,8","5,-3,12","5,-3,16","5,-2,-19","5,-2,-18","5,-2,-15","5,-2,-11","5,-2,-7","5,-2,-3","5,-2,1","5,-2,5","5,-2,9","5,-2,10","5,-2,15","5,-1,-20","5,-1,-17","5,-1,-15","5,-1,-14","5,-1,-13","5,-1,-12","5,-1,-11","5,-1,-10","5,-1,-9","5,-1,-8","5,-1,-7","5,-1,-6","5,-1,-5","5,-1,-4","5,-1,-3","5,-1,-2","5,-1,-1","5,-1,0","5,-1,1","5,-1,2","5,-1,3","5,-1,4","5,-1,5","5,-1,6","5,-1,7","5,-1,8","5,-1,9","5,-1,10","5,-1,11","5,-1,12","5,-1,13","5,-1,15","5,-1,17","5,1,-21","5,1,-20","5,2,-21","5,2,-16","5,2,14","5,2,17","5,2,18","5,3,-18","5,3,-17","5,3,-13","5,3,-9","5,3,-5","5,3,-1","5,3,3","5,3,7","5,3,11","6,1,-16","0,-2,0","-3,2,17","3,2,17","-3,2,16","3,2,16","-5,0,16","5,0,16","-5,-1,16","5,-1,16","-5,1,16","5,1,16","-4,0,16","4,0,16","-3,1,16","3,1,16","-3,0,16","3,0,16","-3,-1,16","3,-1,16","-3,-2,16","3,-2,16","-4,3,-18","4,3,-18","-5,1,-19","5,1,-19","-5,-1,-19","5,-1,-19","-5,2,-18","5,2,-18","-3,2,-19","3,2,-19","-5,0,-19","5,0,-19","-3,2,-20","3,2,-20","-3,3,-18","3,3,-18","-4,0,-19","4,0,-19","-3,1,-19","3,1,-19","-3,0,-19","3,0,-19","-2,0,-19","2,0,-19","-1,0,-19","1,0,-19","5,3,17","4,3,17","3,3,17","2,3,17","1,3,17","0,3,17","-1,3,17","-2,3,17","-3,3,17","-4,3,17","-5,3,17","-5,3,15","-4,3,15","-2,3,15","-1,3,15","0,3,15","1,3,15","2,3,15","4,3,15","5,3,15","3,3,15","-3,3,15","3,3,16","-3,3,16","5,-1,-16","-5,-1,-16","5,-2,-16","-5,-2,-16","5,-2,14","-5,-2,14","5,-1,14","-5,-1,14","5,0,17","-5,0,17","-2,0,17","2,0,17"],"BLR":[20,20,14,13,13,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,0,12,12,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,22,6,8,0,0,6,4,2,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,6,4,6,0,4,0,0,2,0,0,0,0,0,14,0,0,0,0,0,0,0,0,6,4,6,4,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,3,6,10,10,4,6,10,21,4,2,0,0,0,0,0,0,0,0,14,13,13,0,0,0,0,0,0,0,0,6,10,4,22,3,6,4,2,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,10,10,0,10,6,10,4,0,0,6,4,2,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,3,6,10,23,21,4,6,21,4,2,0,0,0,0,0,0,0,0,14,13,13,0,0,0,0,0,0,0,0,6,10,10,4,22,6,10,4,2,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,6,4,6,20,4,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,6,4,6,0,4,0,0,0,0,0,0,0,0,14,2,2,2,2,2,2,2,2,3,12,12,12,12,12,12,12,0,12,12,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,6,8,21,0,0,6,4,2,0,0,0,0,0,0,0,0,21,4,0,0,4,4,20,21,0,0,8,8,20,21,4,4,5,7,5,7,9,11,2,2,11,9,0,0,5,7,11,9,15,13,0,0,10,10,22,23,6,6,13,15,13,15,15,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,9,11,0,0,0,0,9,11,3,1,0,0],"BP1":null,"BP2":nullnull,"BlockData":"nQAAIwAAAA4AAQAAAAAAAAIAAAAAAAB2JgAAAAcAQhgAAAAHAF0bAQAABwABAAQK1yM8AAAEBQAAALIAACMAAAAqAAsAAAAAAAAMAAAAABUAAAAAAAAVAF0AAAAAIwBdGwEAACMAFAAEnu+nPRUABAAAekMWAATNzEw+AAAECwAAAAEABAIAAAAAAAQGAAAAswAAIwAAACoACwAAAAAAAAwAAAAAFQAAAAAAABUAXQAAAAAjAF0bAQAAIwAUAASHFtk9FQAEAAB6QxYABAAAAD8AAAQKAAAAAQAEAQAAAAAABAcAAAC0AAAjAAAAhQAPJwAAAAAAhM0AAAAAAIXNAAAAfgCGzQAAAH4AXRsBAAB+ANwABM3MTD3dAAQAAHpD3gAEmpmZPkABBM3MTD1BAQQAAHpDQgEEmpmZPqQBBM3MTD2lAQQAAHpDpgEEmpmZPggCBM3MTD0JAgQAAHpDCgIEmpmZPmwCBM3MTD1tAgQAAHpDbgIEmpmZPtACBM3MTD3RAgQAAHpD0gIEmpmZPgAABAoAAAC5AAAOAAAABwAAAAAAAAAAXRsBAAAAAAAABAsAAABvAQAHAAAABwBdGwEAAAAAAAAEHAAAAHoBACMAAAAVAAEAAAAAAABdAAAAAAcA7GIAAAAHAIZ7AAAABwBdGwEAAA4AAQAEyP9/PwEABAAAgD8AAAQgAAAAewEAIwAAABUAAQAAAAAAAF0AAAAABwDsYgAAAAcAhnsAAAAHAF0bAQAADgABAATI/38/AQAEAACAvwAABCEAAAB8AQAjAAAAHAABAAAAAAAAXQAAAAAHAOxiAAAABwCGewAAAAcAXRsBAAAVAAEABMP/fz8CAAQAAIC/AwAEAACAvwAABCIAAAB9AQAjAAAAHAABAAAAAAAAXQAAAAAHAOxiAAAABwCGewAAAAcAXRsBAAAVAAEABID/fz8CAAQAAIA/AwAEAACAvwAABCMAAACAAQAOAAAABwA0AAAAAAAAXRsBAAAHAAAABAAAIEGBAQAOAAAABwA0AAAAAAAAXRsBAAAHAAAABAAAIEGCAQAVAAAADgA6AAAAAAAAMwAAAAAHAF0bAQAABwAAAAQAACBBAAAEJAAAAIMBABUAAAAOADoAAAAAAAAzAAAAAAcAXRsBAAAHAAAABAAAIEEAAAQlAAAAlAEAIwAAABUAAQAAAAAAAF0AAAAABwDsYgAAAAcAhnsAAAAHAF0bAQAADgABAATI/38/AQAEAACAvwAABCYAAACVAQAjAAAAFQABAAAAAAAAXQAAAAAHAOxiAAAABwCGewAAAAcAXRsBAAAOAAEABMj/fz8BAAQAAIA/AAAEJwAAAJYBACMAAAAcAAEAAAAAAABdAAAAAAcA7GIAAAAHAIZ7AAAABwBdGwEAABUAAQAEx/9/PwIABAAAgL8DAAQAAIA/AAAEKAAAAJcBACMAAAAcAAEAAAAAAABdAAAAAAcA7GIAAAAHAIZ7AAAABwBdGwEAABUAAQAEx/9/PwIABAAAgD8DAAQAAIA/AAAEKQAAAJoBAA4AAAAHADQAAAAAAABdGwEAAAcAAAAEAAAgQZsBAA4AAAAHADQAAAAAAABdGwEAAAcAAAAEAAAgQZwBABUAAAAOADoAAAAAAAAzAAAAAAcAXRsBAAAHAAAABAAAIEEAAAQqAAAAnQEAFQAAAA4AOgAAAAAAADMAAAAABwBdGwEAAAcAAAAEAAAgQQAABCsAAAA=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAADBfVafAAAAAAcAAAAHAAAAAAAAAAAAAAQBAAAAOe0HAAAAAAAHAAAABwABAAAAAAAAAAAERFjhPj41FAAAAAAABwAAACMAAQAAAAAAAAoABM3MzD0LAATNzMw9DAAEzczMPQ0ABM3MzD0OAATNzMw9UkMAAAAAAAAHAAAAAAABAAAAAAAAxEoAAAAAAAAHAAAADgAAAAAAAAAAAAAEANv5RgMABABN/kYr3goAAAAAAAcAAAAIAAEAAAAAAAAAAAEAAQABADKOUAAAAAAABwAAAAAAAAAAAAAAANCrZQAAAAAADgAAAAQAAAAAAAAAAAEAAAAABAAAAAEBLssEAAAAAAAHAAAAAAAkiAAAAAAAwidhAAAAAAAHAAAARgAAAAAAAAAAAAAEAABIQgoABAAAyMEPAAQAAFxCFAAEAAD6QxkABACAO0UyAAQAQBxGNwAEAEAcRh4ABAAAgD8jAAQAAIA/KAAEAACgQRLoAQAAAAAADgAAAAAADycAAAAAAKCGAQAAAAA=","designChanged":false,"blueprintVersion":10,"blueprintName":"spot-BD","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":711,"LocalPosition":"15769.8,48.33641,-14997.76","LocalRotation":"3.023564E-07,-0.8615348,-1.35977E-06,-0.5076985","ForceId":1290841320,"TotalBlockCount":1036,"MaxCords":"7,3,18","MinCords":"-7,-3,-21","BlockIds":[1106,1106,943,939,939,939,939,939,939,939,939,939,939,937,939,939,939,939,939,939,390,939,937,943,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,944,939,943,937,390,390,937,944,945,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,943,944,943,390,944,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,943,944,943,944,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,939,943,939,939,944,943,937,939,944,945,939,939,939,939,939,939,939,939,943,938,938,939,939,939,939,939,939,939,939,943,939,944,938,412,943,1023,945,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,419,419,463,641,943,939,944,403,445,943,1023,945,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,938,943,939,938,938,944,943,938,1023,945,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,939,939,943,939,939,944,939,943,937,944,945,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,943,944,943,1106,944,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,943,944,943,390,944,939,939,939,939,939,939,939,939,943,939,939,939,939,939,939,939,939,939,937,939,939,939,939,939,939,390,939,937,943,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,939,944,943,937,939,390,390,937,944,945,939,939,939,939,939,939,939,939,1106,417,390,390,7,7,7,7,390,390,937,937,341,341,341,341,295,295,276,276,340,340,945,945,937,937,390,390,939,939,7,7,7,7,390,390,942,942,341,341,341,341,295,295,276,276,340,340,943,943,943,943,943,943,943,943,943,943,943,937,937,937,937,937,937,937,937,937,390,390,7,7,937,937,390,390,390,390,937,937,938,938,390,390],"BlockState":"=0,450","AliveCount":450,"BlockStringData":["CONTROLLER_CPS = 1  -- cycles per second, this is the number of step taken per second. lower is more stable but higher is faster\nSMOOTHER_SPEED = 0.05  -- rate of variation of the value toward target value per call (1/40s). shouldn't be changed\n-- name of the strafer ad forwarder spinner to relay commands\nINPUT_STRAFER_NAME = \"strafer\"\nINPUT_FORWARDER_NAME = \"forwarder\"\nINPUT_SPINNER_POWER = 0.5  -- the power expected on the input spinners (0 > power > 1, 0 and 1 won't work)\n-- the ratio fo time a leg spend on ground vs returning to the start point.\n-- higher is faster but risk maxing out the spinner speed and hitting ground too strongly (and looking weird)\nGAIT_GROUND_RATIO = 0.7\nGAIT_MIN_HEIGHT = 4  -- min height for the return move of the gait\nGAIT_SIZE_FACTOR = 0.7  -- global size factor for the gait (1 is default, 0 is total disable)\nGAIT_FORWARD_FACTOR = 1  -- forward size factor for the gait (1 is default, 0 is total disable)\nGAIT_STRAFE_FACTOR = 0.7  -- strafe size factor for the gait (1 is default, 0 is total disable)\nGAIT_YAW_FACTOR = 0.7  -- yaw size factor for the gait (1 is default, 0 is total disable)\n\nIK_MODEL = {INSECT = 1, HUMAN = 2, CHICKEN = 3}  -- model for leg, INSECT is horizontal, HUMAN is vertical with forward knee, CHICKEN is vertical with inverse knee\n\nADJUSTER_HEIGHT_OFFSET = 0.4  -- offset between the calculated foot position and the actual, should be 0 when well configured, but sometimes around that\nADJUSTER_SPRING_STRENGTH = 0.9  -- strength of the adjuster software spring, 0 means infinite strength, 1 means no strength\n\n\ncontroller = nil\n\nfunction Update(I)\n    if controller == nil then\n        controller = Controller.newAmplitudeController(I, buildArms(I))\n    end\n    controller:move(I)\nend\n\nfunction buildArms(I)\n    --spot 4 legs\n\n    local segment0 = { len = Vector3(0, 0, 1), spinOffset = 0, spinDirection = 1 }\n    local segment1 = { len = Vector3(0, 0, 15), spinOffset = 0, spinDirection = 1 }\n    local segment2 = { len = Vector3(0, 0, 17), spinOffset = 0, spinDirection = 1 }\n    local segment3 = { len = Vector3(0, 0, 2.5), spinOffset = 0, spinDirection = 1 }\n    return PrefabLegBuilder.buildLegs(I,\n                {\n                    { phase = 0.25, ikModel = IK_MODEL.CHICKEN, gaitCenter = Vector3(0, -24, 0), segments = { segment0, segment1, segment2, segment3 } }, -- bottom right\n                    { phase = 0, ikModel = IK_MODEL.CHICKEN, gaitCenter = Vector3(0, -24, 0), segments = { segment0, segment1, segment2, segment3 } }, -- top right\n                    { phase = 0.5, ikModel = IK_MODEL.CHICKEN, gaitCenter = Vector3(0, -24, 0), segments = { segment0, segment1, segment2, segment3 } }, -- top left\n                    { phase = 0.75, ikModel = IK_MODEL.CHICKEN, gaitCenter = Vector3(0, -24, 0), segments = { segment0, segment1, segment2, segment3 } }  -- bottom left\n                })\nend\n\nAdjuster = {\n    new = function(I, legs)\n        return {\n            comAdjust = Vector3.zero,\n            maxOffset = legs[next(legs)].segments[2].len.z * 0.4,\n            legOffsets = {},\n            getForLeg = function(self, leg)\n                local legOffset = Vector3(0, self.legOffsets[leg], 0)\n                if (legOffset == nil) then\n                    legOffset = Vector3.zero\n                end\n                return self.comAdjust + legOffset\n            end,\n            calculateLegOffsets = function(self, I, legTargets, stepTime)\n                local vehicleWorldPosition = I:GetConstructCenterOfMass() + I:GetVelocityVector() * stepTime\n                local vehicleWorldRotationVector = Vector3((I:GetConstructPitch() + 360) % 360,\n                        (I:GetConstructYaw() + 360) % 360,\n                        (I:GetConstructRoll() + 360) % 360)-- + I:GetAngularVelocity() * stepTime\n                local vehicleWorldRotation = Quaternion.Euler(vehicleWorldRotationVector)\n                self.legOffsets = {}\n                local log = \"\"\n                for leg, target in pairs(legTargets) do\n                    local targetLocalPosition = leg.position + target\n                    local targetWorldPos = vehicleWorldPosition + vehicleWorldRotation * targetLocalPosition\n                    local heightDiff = targetWorldPos.y - ADJUSTER_HEIGHT_OFFSET - I:GetTerrainAltitudeForPosition(targetWorldPos.x, targetWorldPos.y, targetWorldPos.z)\n                    log = log .. string.format(\"heightDiff=%f, \", heightDiff)\n\n                    if(heightDiff < 0) then\n                        self.legOffsets[leg] = -heightDiff*ADJUSTER_SPRING_STRENGTH\n                    end\n                end\n                I:Log(log)\n            end\n        }\n    end\n}\n\n-- gathers input commands, calculate the target position for each leg and moves them\nController = {\n    -- build each individual movement gait for each leg\n    buildLegsGaits = function(I, legs)\n        local legGaits = {}\n        for id, leg in pairs(legs) do\n            legGaits[leg] = {\n                Walking = Gait.Walking.autoconfig(I, leg, -Mathf.PI / 2),\n                Strafing = Gait.Walking.autoconfig(I, leg, 0),\n                Turning = Gait.Turning.autoconfig(I, leg),\n                Resting = Gait.Resting.autoconfig(I, leg)\n            }\n        end\n        return legGaits\n    end,\n    -- calculate the target for each leg using the supplied commands\n    calculateTarget = function(leg, gaits, curStep, forward, yaw, strafe)\n        local fTarget\n        local sTarget\n        local yTarget\n        local rTarget = gaits['Resting'].getPoint((curStep + leg.phase) % 1)\n        local fRatio = math.abs(forward) * GAIT_SIZE_FACTOR * GAIT_FORWARD_FACTOR\n        local sRatio = math.abs(strafe) * GAIT_SIZE_FACTOR * GAIT_STRAFE_FACTOR\n        local yRatio = math.abs(yaw) * GAIT_SIZE_FACTOR * GAIT_YAW_FACTOR\n        local fDirection = Mathf.Sign(forward)\n        local sDirection = Mathf.Sign(strafe)\n        local yDirection = Mathf.Sign(yaw)\n        if (fRatio > 0.01) then\n            fTarget = (fRatio * gaits['Walking'].getPoint((fDirection * (curStep + leg.phase) % 1)) + (1 - fRatio) * rTarget)\n        end\n        if (sRatio > 0.01) then\n            sTarget = (sRatio * gaits['Strafing'].getPoint((sDirection * (curStep + leg.phase) % 1)) + (1 - sRatio) * rTarget)\n        end\n        if (yRatio > 0.01) then\n            yTarget = (yRatio * gaits['Turning'].getPoint((yDirection * (curStep + leg.phase) % 1)) + (1 - yRatio) * rTarget)\n        end\n\n        local wTarget = nil\n        if (fTarget ~= nil) then\n            if (sTarget ~= nil) then\n                wTarget = fTarget + sTarget - leg.gaitCenter\n            else\n                wTarget = fTarget\n            end\n        elseif sTarget ~= nil then\n            wTarget = sTarget\n        end\n\n        if (wTarget ~= nil) then\n            if (yTarget ~= nil) then\n                return (wTarget + yTarget) - leg.gaitCenter\n            else\n                return wTarget\n            end\n        elseif yTarget ~= nil then\n            return yTarget\n        else\n            return rTarget\n        end\n    end,\n    -- create a controller that throttles using amplitude of movement\n    newAmplitudeController = function(I, legs)\n        local legGaits = Controller.buildLegsGaits(I, legs)\n        return {\n            legGaits = legGaits,\n            cps = CONTROLLER_CPS, -- cycles per second\n            comAdjuster = Adjuster.new(I, legs),\n            lastTime = I:GetGameTime(),\n            curTurn = 0,\n            commandReader = InputReader.new(I),\n            -- read the inputs, calculates the target for each leg and makes them move\n            move = function(self, I)\n                local curTime = I:GetGameTime()\n                local curStep = (curTime * self.cps) % 1\n                local inputs = self.commandReader:getCommands(I)\n                I:Log(string.format('forward=%f, yaw=%f, strafe=%f', inputs.forward, inputs.yaw, inputs.strafe))\n                local legTargets = {}\n                for leg, gaits in pairs(self.legGaits) do\n                    local target = Controller.calculateTarget(leg, gaits, curStep, inputs.forward, inputs.yaw, inputs.strafe)\n                    legTargets[leg] = target\n                end\n                self.comAdjuster:calculateLegOffsets(I, legTargets, curTime - self.lastTime)\n                for leg, target in pairs(legTargets) do\n                    leg:moveLeg(I, target + self.comAdjuster:getForLeg(leg), curTime)\n                    --leg:moveLeg(I, target, curTime)\n                end\n                self.lastTime = curTime\n            end,\n            -- check that all legs are still there\n            checkIntegrity = function(self, I)\n                local subConstructs = I:GetAllSubConstructs()\n                local scIndex = {}\n                for i = 1, #subConstructs do\n                    scIndex[subConstructs[i]] = true\n                end\n                for leg, gaits in pairs(self.legGaits) do\n                    if not scIndex[leg.segments[1].spinId] then\n                        return false\n                    end\n                end\n                return true\n            end\n        }\n    end\n}\n-- wrap a value to smooth the output so that changes are not to drastic\nSmoother = {\n    new = function()\n        return {\n            target = 0, -- wanted value\n            speed = SMOOTHER_SPEED, -- variation of value toward target per evaluation\n            value = 0, -- current value\n            update = function(self, val) -- change the target\n                self.target = val\n                return self\n            end,\n            evaluate = function(self) -- get the next value\n                if (self.target ~= self.value) then\n                    if (math.abs(self.target - self.value) < self.speed) then\n                        self.value = self.target\n                    else\n                        local sign = Mathf.Sign(self.target - self.value)\n                        self.value = self.value + sign * self.speed\n                    end\n                end\n                return self.value\n            end\n        }\n    end\n}\n\n-- handle configuring and reading inputs, especially strafe and forwards commands using a spinner as relay\nInputReader = {\n    new = function(I)\n        local strafeId = -1\n        local forwardId = -1\n        local subConstructs = I:GetAllSubConstructs()\n        for i = 1, #subConstructs do\n            if I:IsSpinBlock(subConstructs[i]) then\n                if I:IsSubConstructOnHull(subConstructs[i]) then\n                    local blockInfo = I:GetSubConstructInfo(subConstructs[i])\n                    if blockInfo.CustomName == INPUT_STRAFER_NAME then\n                        strafeId = blockInfo.SubConstructIdentifier\n                    elseif blockInfo.CustomName == INPUT_FORWARDER_NAME then\n                        forwardId = blockInfo.SubConstructIdentifier\n                    end\n                end\n            end\n        end\n\n        local commands = {\n            forward = {\n                forwardId = forwardId,\n                smoother = Smoother.new(),\n                read = function(self, I)\n                    local drive = I:GetDrive(0)\n                    if drive == 0 then\n                        return InputReader.readSpinner(I, self.forwardId)\n                    else\n                        return drive\n                    end\n                end\n            },\n            yaw = {\n                smoother = Smoother.new(),\n                read = function(self, I)\n                    return I:GetInput(0, 0) - I:GetInput(0, 1)\n                end\n            },\n            strafe = {\n                strafeId = strafeId,\n                smoother = Smoother.new(),\n                read = function(self, I)\n                    return InputReader.readSpinner(I, self.strafeId)\n                end\n            }\n        }\n\n        return {\n            commands = commands,\n            getCommands = function(self, I)\n                return {\n                    forward = self.commands.forward.smoother:update(self.commands.forward:read(I)):evaluate(),\n                    strafe = self.commands.strafe.smoother:update(self.commands.strafe:read(I)):evaluate(),\n                    yaw = self.commands.yaw.smoother:update(self.commands.yaw:read(I)):evaluate(),\n                }\n            end\n        }\n    end,\n    readSpinner = function(I, spinnerId)\n        if spinnerId ~= -1 then\n            local angle = Vector3.SignedAngle(Vector3.forward, I:GetSubConstructInfo(spinnerId).LocalForwards, Vector3.up)\n            return angle / (180 * INPUT_SPINNER_POWER)\n        end\n        return 0\n    end\n}\n\n-- contains all possible gaits for a leg, with handy creation method\nGait = {\n    -- walking gait, composed of a flat line and an elliptic return to origin\n    Walking = {\n        new = function(position, yAngle, height, width)\n            return {\n                getPoint = function(t)\n                    local groundRatio = GAIT_GROUND_RATIO -- ratio of time passed on ground over time returning to origin\n                    t = (t + groundRatio / 2) % 1\n                    local target\n                    if (t < groundRatio) then\n                        target = Vector3(\n                                position.x + width / 2 - (t / groundRatio) * width,\n                                position.y,\n                                position.z)\n                    else\n                        local te = 0.5 - 0.5 * (t - groundRatio) / (1 - groundRatio)\n                        target = Vector3(\n                                position.x + math.cos(te * Mathf.PI * 2) * (width / 2),\n                                position.y + math.sin(te * Mathf.PI * 2) * height,\n                                position.z)\n                    end\n                    return rotateAround(target, yAngle, position)\n                end\n            }\n        end,\n        autoconfig = function(I, leg, angle)\n            local posCenter\n            if leg.gaitCenter == nil then\n                local legDirection = I:GetSubConstructInfo(leg.segments[1].spinId).LocalPositionRelativeToCom\n                posCenter = legDirection.normalized * ((leg.segments[1].len.z + leg.segments[2].len.z) * 1.2)\n                posCenter.y = -leg.segments[3].len.z + leg.segments[1].len.y - 2\n            else\n                posCenter = leg.gaitCenter\n            end\n\n            local actionRay = math.sqrt(Mathf.Pow(leg.length, 2) - Mathf.Pow(posCenter.y, 2)) - math.sqrt(posCenter.x * posCenter.x + posCenter.z * posCenter.z)\n\n            I:Log(string.format(\"creating walking gait for leg %s, centered at %s with width %f\", tostring(leg.position), tostring(posCenter), actionRay * 2 * GAIT_SIZE_FACTOR))\n\n            return Gait.Walking.new(posCenter,\n                    angle, math.max(leg.segments[2].len.z * 0.5, GAIT_MIN_HEIGHT), actionRay * 2 * GAIT_SIZE_FACTOR)\n        end\n    },\n    -- turning gait, composed of a circle arc on the ground and a elliptic circle arc to return to origin\n    Turning = {\n        new = function(center, radius, radStart, radLength, height)\n            return {\n                getPoint = function(t)\n                    local groundRatio = GAIT_GROUND_RATIO\n                    t = (t + groundRatio / 2) % 1\n                    if (t < groundRatio) then\n                        -- foot on ground\n                        local tg = t / groundRatio\n                        return Vector3(\n                                center.x + radius * math.cos(radStart + (radLength * (tg))),\n                                center.y,\n                                center.z + radius * math.sin(radStart + (radLength * (tg))))\n                    else\n                        local tv = 0.5 * (t - groundRatio) / (1 - groundRatio)\n                        local th = (1 + math.cos(tv * Mathf.PI * 2)) / 2;\n                        return Vector3(\n                                center.x + radius * math.cos(radStart + (radLength * th)),\n                                center.y + math.sin(tv * Mathf.PI * 2) * height,\n                                center.z + radius * math.sin(radStart + (radLength * th)));\n                    end\n                end\n            }\n        end,\n        autoconfig = function(I, leg)\n            local spinPosition = I:GetSubConstructInfo(leg.segments[1].spinId).LocalPositionRelativeToCom\n\n            local rotCenter\n            local rotRadius\n            local angleOffset\n            if leg.gaitCenter == nil then\n                rotCenter = Vector3(-spinPosition.x, -leg.segments[3].len.z + leg.segments[1].len.y - 2, -spinPosition.z)\n                rotRadius = math.sqrt(spinPosition.x * spinPosition.x + spinPosition.z * spinPosition.z) + leg.segments[1].len.z + leg.segments[2].len.z\n                angleOffset = 2 * Mathf.PI * Vector3.SignedAngle(Vector3.ProjectOnPlane(spinPosition, Vector3.up), Vector3.right, Vector3.up) / 360\n            else\n                rotCenter = Vector3(-spinPosition.x, leg.gaitCenter.y, -spinPosition.z)\n                rotRadius = Vector3.Distance(rotCenter, leg.gaitCenter)\n                angleOffset = 2 * Mathf.PI * Vector3.SignedAngle(Vector3.ProjectOnPlane(spinPosition + leg.gaitCenter, Vector3.up), Vector3.right, Vector3.up) / 360\n            end\n            local Ta = math.sqrt(leg.gaitCenter.x * leg.gaitCenter.x + leg.gaitCenter.z * leg.gaitCenter.z);\n            local actionRay = math.sqrt(Mathf.Pow(leg.length, 2) - Mathf.Pow(leg.gaitCenter.y, 2)) - Ta\n\n            local angleTurning = Mathf.Atan2(actionRay, Ta + math.sqrt(spinPosition.x * spinPosition.x + spinPosition.z * spinPosition.z))\n\n            I:Log(string.format(\"creating turning gait for leg %s, rotating around %s with radius %f, turning %f and offset %f\", tostring(leg.position), tostring(rotCenter), rotRadius, angleTurning, angleOffset))\n\n            return Gait.Turning.new(rotCenter,\n                    rotRadius * GAIT_SIZE_FACTOR,\n                    angleOffset + angleTurning,\n                    -2 * angleTurning,\n                    math.max(leg.segments[2].len.z * 0.5, GAIT_MIN_HEIGHT)\n            )\n        end\n    },\n    -- resting gait, legs immobile at center\n    Resting = {\n        new = function(position)\n            return {\n                getPoint = function(t)\n                    return position\n                end\n            }\n        end,\n        autoconfig = function(I, leg)\n            local position\n            if leg.gaitCenter == nil then\n                local legDirection = I:GetSubConstructInfo(leg.segments[1].spinId).LocalPositionRelativeToCom\n                position = legDirection.normalized * ((leg.segments[1].len.z + leg.segments[2].len.z) * 1.2)\n                position.y = -leg.segments[3].len.z + leg.segments[1].len.y - 2\n            else\n                position = leg.gaitCenter\n            end\n            I:Log(string.format(\"creating resting gait for leg %s, at %s\", tostring(leg.position), tostring(position)))\n            return Gait.Resting.new(position)\n        end\n    }\n}\n\n-- represent a segment of a leg, used to control the spinner of this segment\nSegment = {\n    new = function(spinId, len, spinOffset, spinDirection)\n        return {\n            lastUpdate = nil,\n            lastAngle = nil,\n            spinId = spinId,\n            len = len,\n            spinOffset = spinOffset,\n            spinDirection = spinDirection,\n            setAngle = function(self, I, angle, t)\n                local rotSpeed = 0\n                if (self.lastUpdate ~= nil and self.lastUpdate ~= t) then\n                    local ellapsedTime = (t - self.lastUpdate + 1) % 1\n                    rotSpeed = math.min(math.abs((angle - self.lastAngle) / (ellapsedTime)), 30)\n                    --I:Log(string.format('spinner %d going from %f to %f in %f seconds, setting speed at %f rad/s', self.spinId, self.lastAngle, angle, ellapsedTime, rotSpeed))\n                end\n                self.lastUpdate = t\n                self.lastAngle = angle\n                I:SetSpinBlockContinuousSpeed(self.spinId, 30)\n                local angleDeg = 360 * angle / (2 * Mathf.PI)\n                I:SetSpinBlockRotationAngle(self.spinId, self.spinDirection * (angleDeg + self.spinOffset))\n            end\n        }\n    end\n}\n\n-- helper method to build legs using a leg template and finding suitable spinners on construct\nPrefabLegBuilder = {\n    buildLegs = function(I, legTemplates)\n        local subConstructs = I:GetAllSubConstructs()\n\n        local scByOrientation = {}\n        for i = 1, #subConstructs do\n            local id = subConstructs[i]\n            if I:IsSpinBlock(id) then\n                if I:IsSubConstructOnHull(id) then\n                    local scPos = I:GetSubConstructInfo(id).LocalPositionRelativeToCom\n                    table.insert(scByOrientation, { id = id, ori = Vector3.SignedAngle(Vector3.forward, Vector3.ProjectOnPlane(scPos, Vector3.up), Vector3.up) })\n                end\n            end\n        end\n        table.sort(scByOrientation, function(a, b)\n            return a.ori > b.ori\n        end)\n\n        local legs = {}\n        local i = 1\n        local defaultPhase = 0\n        for pos, scSorted in pairs(scByOrientation) do\n            local scId = scSorted.id\n            if legTemplates[i] ~= nil then\n                local leg = PrefabLegBuilder.buildLegFromTemplate(I, scId, legTemplates[i])\n                if leg ~= nil then\n                    if (legTemplates[i].phase == nil) then\n                        leg.phase = defaultPhase\n                    else\n                        leg.phase = legTemplates[i].phase\n                    end\n                    defaultPhase = (defaultPhase + 0.5) % 1\n                    legs[scId] = leg\n                    i = i + 1\n                    I:Log(string.format('built leg : %d segment, position %s, gaitCenter %s, segment length %f', #leg.segments, tostring(leg.position), tostring(leg.gaitCenter), leg.length))\n                end\n            end\n        end\n\n        return legs\n    end,\n    buildLegFromTemplate = function(I, baseScId, legTemplate)\n        local sc = I:GetSubConstructInfo(baseScId)\n        local length = 0\n        for i = 1, #legTemplate.segments do\n            length = length + legTemplate.segments[i].len.magnitude\n        end\n        local ikModel\n        if legTemplate.ikModel == IK_MODEL.HUMAN then\n            ikModel = IkLib.moveHumanoidLeg\n        elseif legTemplate.ikModel == IK_MODEL.CHICKEN then\n            ikModel = IkLib.moveChickenLeg\n        else\n            ikModel = IkLib.moveInsectoidLeg\n        end\n        local leg = {\n            position = sc.LocalPositionRelativeToCom,\n            segments = {},\n            moveLeg = function(leg, I, target, t)\n                local a0, a1, a2, a3 = ikModel(leg, I, target)\n\n                I:Log(string.format('t=%f : moving humanoid leg %d at %s, offset=%d, spinDir=%d to %s with angle a0=%f, a1=%f, a2=%f',\n                            t, leg.segments[1].spinId, tostring(leg.position), leg.segments[1].spinOffset, leg.segments[1].spinDirection, tostring(target), a0, a1, a2))\n\n                leg.segments[1]:setAngle(I, a0, t)\n                leg.segments[2]:setAngle(I, a1, t)\n                leg.segments[3]:setAngle(I, a2, t)\n                if leg.segments[4] ~= nil then\n                    leg.segments[4]:setAngle(I, a3, t)\n                end\n            end,\n            gaitCenter = legTemplate.gaitCenter,\n            length = length\n        }\n\n        I:Log(string.format('found base spinner number %d', sc.SubConstructIdentifier))\n        for i = 1, #legTemplate.segments do\n            local segTemplate = legTemplate.segments[i]\n            leg.segments[i] = Segment.new(\n                    sc.SubConstructIdentifier,\n                    segTemplate.len,\n                    segTemplate.spinOffset,\n                    segTemplate.spinDirection\n            )\n\n            if i < #legTemplate.segments then\n                local scChildren = I:GetAllSubConstructChildren(sc.SubConstructIdentifier)\n                if (#scChildren ~= 1) then\n                    I:Log(\"not a leg, keeping searching\")\n                    return nil\n                else\n                    sc = I:GetSubConstructInfo(scChildren[1])\n                end\n            end\n        end\n        return leg\n    end\n}\n\n-- helper lib for doing inverse kinematic using a leg config\nIkLib = {\n    moveInsectoidLeg = function(leg, I, target)\n        if target.magnitude > leg.length then\n            I:LogToHud(string.format(\"ERROR : target %s is too far for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        if target.magnitude < leg.segments[1].len.z then\n            I:LogToHud(string.format(\"ERROR : target %s is too close for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        local a0 = (target.z > 0 and -1 or 1) * math.acos(target.x / math.sqrt(target.x * target.x + target.z * target.z))\n\n        local rx = target.x / math.cos(a0) - leg.segments[1].len.z\n        -- if segment 1 (the first one) is going up/down (has y component), it must be taken into account\n        -- for calculating the up/down on the plane\n        local ry = target.y - leg.segments[1].len.y\n        if leg.segments[4] then\n            ry = ry + leg.segments[4].len.z\n        end\n        local rMag = math.sqrt(rx * rx + ry * ry)\n\n        local a1 = (ry > 0 and 1 or -1) * math.acos(rx / rMag)\n                + math.acos(\n                (leg.segments[2].len.z * leg.segments[2].len.z + rMag * rMag - leg.segments[3].len.z * leg.segments[3].len.z)\n                        / (2 * leg.segments[2].len.z * rMag))\n\n        local a2 = -math.acos((rMag * rMag - leg.segments[2].len.z * leg.segments[2].len.z - leg.segments[3].len.z * leg.segments[3].len.z)\n                / (2 * leg.segments[2].len.z * leg.segments[3].len.z))\n\n        return a0, a1, a2, Mathf.PI/2 - a1 - a2\n    end,\n    moveHumanoidLeg = function(leg, I, target)\n        if target.magnitude > leg.length then\n            I:LogToHud(string.format(\"ERROR : target %s is too far for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        if target.magnitude < leg.segments[1].len.z then\n            I:LogToHud(string.format(\"ERROR : target %s is too close for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        local a0 = (target.x > 0 and 1 or -1) * math.acos(-target.y / math.sqrt(target.x * target.x + target.y * target.y))\n\n        local rx = -target.y / math.cos(a0) - leg.segments[1].len.z\n        if leg.segments[4] then\n            rx = rx - math.cos(a0) * leg.segments[4].len.z\n        end\n        local ry = target.z - leg.segments[1].len.y\n        local rMag = math.sqrt(rx * rx + ry * ry)\n\n        local a1 = (ry > 0 and 1 or -1) * math.acos(rx / rMag)\n                + math.acos(\n                (leg.segments[2].len.z * leg.segments[2].len.z + rMag * rMag - leg.segments[3].len.z * leg.segments[3].len.z)\n                        / (2 * leg.segments[2].len.z * rMag))\n\n        local a2 = -math.acos((rMag * rMag - leg.segments[2].len.z * leg.segments[2].len.z - leg.segments[3].len.z * leg.segments[3].len.z)\n                / (2 * leg.segments[2].len.z * leg.segments[3].len.z))\n\n        return a0, a1, a2, - a1 - a2\n    end,\n    moveChickenLeg = function(leg, I, target)\n        if target.magnitude > leg.length then\n            I:LogToHud(string.format(\"ERROR : target %s is too far for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        if target.magnitude < leg.segments[1].len.z then\n            I:LogToHud(string.format(\"ERROR : target %s is too close for leg %s !\", tostring(target), leg.segments[1].spinId))\n        end\n\n        local a0 = (target.x > 0 and 1 or -1) * math.acos(-target.y / math.sqrt(target.x * target.x + target.y * target.y))\n\n        local rx = -target.y / math.cos(a0) - leg.segments[1].len.z\n        if leg.segments[4] then\n            rx = rx - math.cos(a0) * leg.segments[4].len.z\n        end\n        local ry = target.z - leg.segments[1].len.y\n        local rMag = math.sqrt(rx * rx + ry * ry)\n\n        local a1 = (ry > 0 and 1 or -1) * math.acos(rx / rMag)\n                - math.acos(\n                (leg.segments[2].len.z * leg.segments[2].len.z + rMag * rMag - leg.segments[3].len.z * leg.segments[3].len.z)\n                        / (2 * leg.segments[2].len.z * rMag))\n\n        local a2 = math.acos((rMag * rMag - leg.segments[2].len.z * leg.segments[2].len.z - leg.segments[3].len.z * leg.segments[3].len.z)\n                / (2 * leg.segments[2].len.z * leg.segments[3].len.z))\n\n        return a0, a1, a2, - a1 - a2\n    end\n}\n\nfunction rotateAround(base, yAngle, rotationCenter)\n    local cosA = math.cos(yAngle)\n    local sinA = math.sin(yAngle)\n    return Vector3(\n            rotationCenter.x + cosA * (base.x - rotationCenter.x) + sinA * (base.z - rotationCenter.z),\n            base.y,\n            rotationCenter.z - sinA * (base.x - rotationCenter.x) + cosA * (base.z - rotationCenter.z)\n    )\nend"],"BlockStringDataIds":[28],"GameVersion":"3.4.3.10","PersistentSubObjectIndex":71,"PersistentBlockIndex":108,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"92893814-e264-4ca6-894f-dc95c0c28500","ObjectId":"1d213b2e-a5ec-4be2-8371-4f51e31eb8cd","CreatorReadableName":"Asterion","HashV1":"6acdf1f1b726773fda86fe1830709632"},"BlockCount":450}}